{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAW;AAChC,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,YAAf;;AAEA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAEA;AAEI,qCAAc;AAAA;;AACV,kBAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACH;;AAJL;AAAA;AAAA,4CAM0B;AAClB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B,aAAK;AAC/Bd,0CAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,qBAFD;;AAIAR,gCAAYS,SAAZ,GAAwB,aAAK;AACzB,4BAAG,CAACf,UAAJ,EAAgB;AACZA,yCAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAW;AAC1B,sCAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACH,6BAFD;AAGH;AACDE,gCAAQJ,UAAR;AACH,qBATD;;AAWAM,gCAAYW,OAAZ,GAAsB,aAAK;AACvBC,gCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAA3B;AACAhB,+BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,qBAHD;AAIH,iBAtBM,CAAP;AAuBH;AA9BL;AAAA;AAAA,0CAgCyBrB,UAhCzB,EAgCoC;AAC5BH,uBAAOyB,OAAP,CAAe,iBAAS;AACpB,wBAAGtB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EACIzB,WAAW0B,iBAAX,CAA6BD,KAA7B;;AAEJzB,+BAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAc,IAAf,EAApC;AACH,iBALD;AAMH;AAvCL;AAAA;AAAA,8CAyC6B;AACrB,oBAAG5B,UAAH,EAAe;AACXC;AACAD,iCAAa,IAAb;AACH;AACJ;AA9CL;;AAAA;AAAA;AAgDH,CAxDuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function (){\n    const stores = ['negociacoes'];\n    const version = 5;\n    const dbName = 'aluraframe';\n    \n    var connection = null;\n    var close = null;\n    \n    return class ConnectionFactory {\n    \n        constructor() {\n            throw new Error('Não é possível criar instâncias de ConncetionFactory.');\n        }\n        \n        static getConnection(){\n            return new Promise((resolve, reject) => {\n                let openRequest = window.indexedDB.open(dbName, version);\n    \n                openRequest.onupgradeneeded = e => {\n                    ConnectionFactory._createStores(e.target.result);\n                };\n    \n                openRequest.onsuccess = e => {\n                    if(!connection) {\n                        connection = e.target.result;\n                        close = connection.close.bind(connection);\n                        connection.close = function() {\n                            throw new Error('Você não pode fechar diretamente a conexão');\n                        };\n                    }\n                    resolve(connection);\n                };\n    \n                openRequest.onerror = e => {\n                    console.log(e.target.error.name);\n                    reject(e.target.error.name);\n                };\n            });\n        }\n    \n        static _createStores(connection){\n            stores.forEach(store => {\n                if(connection.objectStoreNames.contains(store))\n                    connection.deleteObjectStore(store);\n                \n                connection.createObjectStore(store, {autoIncrement:true})\n            });\n        }\n\n        static closeConnection() {\n            if(connection) {\n                close();\n                connection = null;\n            }\n        }\n    }\n})();"]}