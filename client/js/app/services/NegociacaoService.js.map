{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","Negociacao","ConnectionFactory","NegociacaoDao","NegociacaoService","_http","get","then","negociacoes","map","Date","objeto","data","quantidade","valor","catch","console","log","erro","Error","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","dado","negociacao","getConnection","connection","dao","adiciona","apagaTodos","listaTodos","listaAtual","obterNegociacoes","filter","some","isEqual","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService';\nimport {Negociacao} from '../models/Negociacao';\nimport {ConnectionFactory} from './ConnectionFactory';\nimport {NegociacaoDao} from '../dao/NegociacaoDao';\n\nexport class NegociacaoService {\n    \n    constructor() {\n        this._http = new HttpService();\n    }\n    \n    obterNegociacoesDaSemana() {\n        return this._http\n            .get('negociacoes/semana')\n            .then(negociacoes => {\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n            })\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações da semana');\n            });  \n    }\n    \n    obterNegociacoesDaSemanaAnterior() {\n        return this._http\n            .get('negociacoes/anterior')\n            .then(negociacoes => {\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n            })\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações da semana anterior');\n            });   \n    }\n    \n    obterNegociacoesDaSemanaRetrasada() {\n        return this._http\n            .get('negociacoes/retrasada')\n            .then(negociacoes => {\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n            })\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações da semana retrasada');\n            });  \n        \n    }\n    \n    obterNegociacoes() {\n        return Promise.all([\n            this.obterNegociacoesDaSemana(),\n            this.obterNegociacoesDaSemanaAnterior(),\n            this.obterNegociacoesDaSemanaRetrasada()\n        ]).then(periodos => {\n            let negociacoes = periodos\n                .reduce((dados, periodo) => dados.concat(periodo), [])\n                .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor ));\n\n            return negociacoes;\n        })\n        .catch(erro => {\n            console.log(erro);\n            throw new Error(erro);\n        });\n    }\n    \n    cadastra(negociacao) {\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.adiciona(negociacao))\n            .then(() => 'Negociação adicionada com sucesso')\n            .catch(erro => {\n                console.log(erro);\n                throw new Error(\"Não foi possível adicionar a negociação\")\n            });\n    }\n\n    apaga() {\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.apagaTodos())\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível apagar as negociações')\n            });\n    }\n\n    lista() {\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.listaTodos())\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações');\n            });\n    }\n\n    importa(listaAtual) {\n        return this.obterNegociacoes()\n            .then(negociacoes =>\n                negociacoes.filter(negociacao =>\n                    !listaAtual.some(negociacaoExistente =>\n                        negociacao.isEqual(negociacaoExistente)\n                    )\n                )\n            );\n    }\n}"]}